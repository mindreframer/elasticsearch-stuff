#! /usr/bin/env ruby

require 'optparse'
require 'elastics-admin'

options  = Elastics::Admin::Tasks.new.default_options

version_path = %w[../../VERSION ../../../VERSION].detect{|v| File.exist?(File.expand_path(v, __FILE__))}
version  = File.read(File.expand_path(version_path, __FILE__)).strip
copy     = "elastics-admin #{version} (c) 2012-2013 by Domizio Demichelis"
optparse = OptionParser.new do |opts|

  opts.banner = <<-banner

    elastics-admin:
        Generic binary tool to dump/load data from/to any elasticsearch index (no app needed).
        If you need to migrate data, use the elastics live-reindexing.

    Usage:
        elastics-admin <command> [options]
    <command>:
        dump    dumps the data from one or more elasticsearch indices
        load    loads a dumpfile
        stats   prints the full elasticsearch stats

    Notice: The load command will load the dump-file into elasticsearch without removing any pre-existent data.
            If you need fresh indices, use the elastics:index:delete and elastics:index:create rake tasks from your
            application, which will also recreate the mapping.
  banner


  opts.separator ''
  opts.separator 'Common options:'

  opts.on( '-f', '--file [FILE]', "The path of the dumpfile (default: '#{options[:file]}')" ) do |f|
    options[:file] = f
  end

  opts.on( '-r', '--[no-]verbose', "Run verbosely (default: '#{options[:verbose]}')" ) do |q|
    options[:verbose] = q
  end

  opts.separator ''
  opts.separator 'Dump options:'

  opts.on( '-i', '--index [INDEX_OR_INDICES]', Array, 'The index or comma separated indices to dump (default: all indices)' ) do |i|
    options[:index] = i
  end

  opts.on( '-t', '--type [TYPE_OR_TYPES]', Array, 'The type or comma separated types to dump (default: all types)' ) do |t|
    options[:type] = t
  end

  opts.on( '-s', '--scroll [TIME]', Integer, "The Elasticsearch scroll time (default: #{options[:scroll]})" ) do |s|
    options[:scroll] = s
  end

  opts.on( '-z', '--size [SIZE]', Integer, "The chunk size to dump per shard (default: #{options[:size]} * number of shards)" ) do |z|
    options[:size] = z
  end

  opts.separator ''
  opts.separator 'Load options:'

  opts.on( '-m', '--index-map [INDEX_MAP]', 'The index rename map (example: -m=dumped_index_name:loaded_index_name,a:b)') do |m|
    options[:index_map] = Hash[m.split(',').map{|i|i.split(':')}]
  end

  opts.on( '-o', '--timeout [SECONDS]', Integer, "The http_client timeout for bulk loading (default: #{options[:timeout]} seconds)" ) do |o|
    options[:timeout] = o
  end

  opts.on( '-b', '--batch-size [BATCH_SIZE]', Integer, "The batch size to load (default: #{options[:batch_size]})" ) do |z|
    options[:batch_size] = z
  end

  opts.separator ''
  opts.separator 'Other options:'

  opts.on( '-v', '--version', 'Shows the version and exits' ) do
    Prompter.say_ok version
    exit
  end

  opts.on_tail( '-h', '--help', 'Displays this screen' ) do
    Prompter.say_log copy, :style => [:blue, :bold]
    puts opts
    exit
  end

end

optparse.parse!
command = ARGV.first
exec "#{$0} -h" if command.nil?
Prompter.say_log copy, :style => [:blue, :bold]

case command

when 'dump'
  Elastics::Admin::Tasks.new(options).dump_to_file(true)

when 'load'
  Elastics::Admin::Tasks.new(options).load_from_file

when 'stats'
  Prompter.say_notice '>> puts Elastics.index_stats.to_yaml'
  Prompter.say_log Elastics.index_stats.to_yaml

else
  Prompter.say_warning "unknown command: #{command.inspect}"

end
